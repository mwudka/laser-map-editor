// Generated by ReScript, PLEASE EDIT WITH CARE


Object.defineProperty(window, "devicePixelRatio", {
      get: (function (param) {
          return 3;
        })
    });

function saveImage(param) {
  var dataURL = document.getElementsByTagName("canvas")[0].toDataURL();
  var a = document.createElement("a");
  a.href = dataURL;
  a.download = "image.png";
  document.body.appendChild(a);
  setTimeout((function (param) {
          document.body.removeChild(a);
          URL.revokeObjectURL(dataURL);
          
        }), 0);
  a.click();
  window.open(dataURL, "_blank", undefined);
  
}

var save = document.getElementById("save");

if (save == null) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

save.addEventListener("click", (function (param) {
        return saveImage(undefined);
      }));

var bounds = localStorage.boundingbox;

var bounds$1 = (bounds == null) ? [
    [
      0.0,
      0.0
    ],
    [
      0.0,
      0.0
    ]
  ] : JSON.parse(bounds);

var width = 64; // The image will be 64 pixels square
var bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.
var data = new Uint8Array(width * width * bytesPerPixel);
 
for (var x = 0; x < width; x++) {
for (var y = 0; y < width; y++) {
var offset = (y * width + x) * bytesPerPixel;
data[offset + 0] = 255;
data[offset + 1] = 0;
data[offset + 2] = 0;
data[offset + 3] = 255; // alpha
}
}
var generatedImage = { width: width, height: width, data: data }
;

mapboxgl.accessToken = "pk.eyJ1IjoibXd1ZGthIiwiYSI6ImNraXhva29veDBtd3Mycm0wMTVtMmx4dXoifQ._3QauG82dcJHW7pNWU4aoA";

var map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mwudka/ckipad3rn3slk17p1rkdxmjdh/draft",
      zoom: 13.0,
      preserveDrawingBuffer: true,
      bounds: bounds$1
    });

map.addControl(new MapboxGeocoder({
          accessToken: mapboxgl.accessToken,
          mapboxgl: mapboxgl
        }));

map.on("load", (function (param) {
        map.loadImage("https://docs.mapbox.com/mapbox-gl-js/assets/popup.png", (function (param, image) {
                console.log("image loaded");
                map.addImage("text-label-background", image, {
                      stretchX: [
                        [
                          25,
                          55
                        ],
                        [
                          85,
                          115
                        ]
                      ],
                      stretchY: [[
                          25,
                          100
                        ]],
                      content: [
                        25,
                        25,
                        115,
                        100
                      ],
                      pixelRatio: 2
                    });
                
              }));
        map.addSource("places", {
              type: "geojson",
              data: {
                type: "FeatureCollection",
                features: []
              }
            });
        map.addLayer({
              id: "poi-labels",
              type: "symbol",
              source: "places",
              layout: {
                "text-field": [
                  "get",
                  "description"
                ],
                "text-justify": "auto",
                "text-rotate": [
                  "get",
                  "rotation"
                ],
                "icon-rotate": [
                  "get",
                  "rotation"
                ],
                "text-offset": [
                  "get",
                  "offsetEM"
                ],
                "icon-offset": [
                  "get",
                  "offsetEM"
                ],
                "icon-text-fit": "both",
                "icon-image": [
                  "literal",
                  "text-label-background"
                ],
                "icon-allow-overlap": true,
                "text-allow-overlap": true
              },
              paint: {
                "text-color": "#000000"
              }
            });
        var createdFeatures = [];
        var createFeature = function (name, coordinates) {
          var newFeature = {
            type: "Feature",
            properties: {
              description: name,
              rotation: 0,
              offsetEM: [
                0,
                0
              ]
            },
            geometry: {
              type: "Point",
              coordinates: coordinates
            }
          };
          createdFeatures.push(newFeature);
          map.getSource("places").setData({
                type: "FeatureCollection",
                features: createdFeatures
              });
          
        };
        map.on("click", (function (e) {
                map.querySourceFeatures("composite", {
                        sourceLayer: "poi_label"
                      }).map(function (poi) {
                      return createFeature(poi.properties.name, poi.geometry.coordinates);
                    });
                var feature = map.queryRenderedFeatures(e.point).filter(function (f) {
                        return f.type === "Feature";
                      }).shift();
                if (feature !== undefined) {
                  return createFeature(feature.properties.name, e.lngLat.toArray());
                }
                
              }));
        window.addEventListener("unload", (function (param) {
                localStorage.boundingbox = JSON.stringify(map.getBounds().toArray());
                
              }));
        
      }));

export {
  saveImage ,
  bounds$1 as bounds,
  map ,
  
}
/*  Not a pure module */
